@page "/panel"
@rendermode InteractiveServer

@inject CasoDeUsoUsuarioListar ListarUserUseCase
@inject NavigationManager navegador
@inject IServicioSesion user
<PageTitle>Panel de Usuario</PageTitle>

<h3>
    <button class="btn btn-primary" @onclick="iraTramite">Ir a Tr치mites</button>
    <button class="btn btn-primary" @onclick="iraExpediente">Ir a Expedientes</button>
    <button class="btn btn-primary" @onclick="EditarDatos">Editar Mis Datos</button>
</h3>

@if (mostrar)
{
    <p>Completar todos los campos para el correcto funcionamiento.</p>
    <label>Nombre: </label><input placeholder="Nombre" @bind="u.Nombre" class="form-control-4"><br>
    <label>Apellido: </label><input placeholder="Apellido" @bind="u.Apellido" class="form-control-4"><br>
    <label>Correo: </label><input placeholder="Correo" @bind="u.Correo" class="form-control-4"><br>
    <label>Contrase침a: </label><input placeholder="Contrasenia" @bind="u.Contrasenia" class="form-control-4"><br>
    <button class="btn btn-primary" @onclick="Aceptar">Aceptar</button>
    @if (PopUpException)
    {
        <PopUpException @ref="Exception" Mensaje="@men" />
    }
}
@if (user.usuarioLoggeado != null)
{
    <h1>Tus Datos</h1>
    <p>nombre= @user.usuarioLoggeado.Nombre <br> apellido= @user.usuarioLoggeado.Apellido <br> Correo=@user.usuarioLoggeado.Correo</p>
}
@if (user.usuarioLoggeado != null && user.usuarioLoggeado.id == 1)
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>NOMBRE</th>
                <th>APELLIDO</th>
                <th>CORREO</th>
                <th>PERMISOS</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var usuario in ListarUserUseCase.Ejecutar())
            {
                <tr>
                    <td>@usuario.id</td>
                    <td>@usuario.Nombre</td>
                    <td>@usuario.Apellido</td>
                    <td>@usuario.Correo</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => MostrarAgregarPermiso(usuario)">Agregar</button>
                        <button class="btn btn-danger" @onclick="() => MostrarEliminarPermiso(usuario)">Eliminar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    @if (mostrarAP)
    {
        <h1>Seleccione un permiso:</h1>
        <select @bind="permisoAux" class="form-control">
            @foreach (var permiso in PermisosDisponibles)
            {
                <option value="@permiso">@permiso</option>
            }
        </select>
        <button class="btn btn-primary" @onclick="agregarPermiso">Confirmar Agregar</button>
        @if (PopUpException)
        {
            <PopUpException @ref="Exception" Mensaje="@men" />
        }
    }

    @if (mostrarEP)
    {
        <h1>Seleccione un permiso:</h1>
        <select @bind="permisoAux" class="form-control">
            @foreach (var permiso in PermisosUsuarios)
            {
                <option value="@permiso">@permiso</option>
            }
        </select>
        <button class="btn btn-danger" @onclick="() => eliminarPermiso(permisoAux)">Eliminar Permiso</button>
        @if (PopUpException)
        {
            <PopUpException @ref="Exception" Mensaje="@men" />
        }
    }
}

@inject CasoDeUsoUsuarioModificar ModificarUserUseCase
@inject CasoDeUsoUsuarioAgregarPermiso agregarPermisoUseCase
@inject CasoDeUsoUsuarioListarPermisos ListarPermisosUseCase
@inject CasoDeUsoUsuarioEliminarPermiso EliminarPermisoUseCase
@code {
    Usuario u = new Usuario();
    PopUpException? Exception;
    Usuario aux = new Usuario(); // no nullable
    string permisoAux = "";
    bool PopUpException { get; set; } = false;
    bool mostrar = false;
    bool mostrarAP = false;
    bool mostrarEP = false;
    string men = "";
    List<string> PermisosDisponibles = new List<string>
    {
        "ExpedienteAlta",
        "ExpedienteBaja",
        "ExpedienteModificacion",
        "TramiteAlta",
        "TramiteBaja",
        "TramiteModificacion"
    };

    List<string> PermisosUsuarios = new List<string>(); 

    async Task agregarPermiso()
    {
        try
        {
            Console.WriteLine(permisoAux);
            agregarPermisoUseCase.Ejecutar(aux.id, (Permiso)Enum.Parse(typeof(Permiso), permisoAux));
            permisoAux = "";
            men = "Se agreg칩 correctamente el permiso.";
            PopUpException = true;
            await Task.Delay(150);
            Exception?.Mostrar();
        }
        catch (Exception e)
        {
            men = e.Message;
            Console.WriteLine(men);
            PopUpException = true;
            await Task.Delay(150);
            Exception?.Mostrar();
        }
    }

    async Task eliminarPermiso(string PermisoAux)
    {
        try
        {
            EliminarPermisoUseCase.Ejecutar(aux.id,(Permiso)Enum.Parse(typeof(Permiso),PermisoAux));
            permisoAux = "";
            men = "Se elimin칩 correctamente el permiso.";
            PermisosUsuarios=ListarPermisosUseCase.Ejecutar(aux);
            PopUpException = true;
            await Task.Delay(150);
            Exception?.Mostrar();
        }
        catch (Exception e)
        {
            men = e.Message;
            Console.WriteLine(men);
            PopUpException = true;
            await Task.Delay(150);
            Exception?.Mostrar();
        }
    }

    void MostrarAgregarPermiso(Usuario usuario)
    {
        mostrarEP = false;
        mostrarAP = true;
        aux = usuario;
    }

    void MostrarEliminarPermiso(Usuario usuario)
    {
        mostrarAP = false;
        mostrarEP = true;
        aux = usuario;
        PermisosUsuarios=ListarPermisosUseCase.Ejecutar(usuario);
    }

    private void iraExpediente()
    {
        navegador.NavigateTo("/expedientes");
    }

    private void iraTramite()
    {
        navegador.NavigateTo("/tramites");
    }

    void EditarDatos()
    {
        mostrar = true;
    }

    async Task Aceptar()
    {
        try
        {
            if (user.usuarioLoggeado != null)
                u.id = user.usuarioLoggeado.id;
            ModificarUserUseCase.Ejecutar(u);
            mostrar = false;
        }
        catch (Exception e)
        {
            men = e.Message;
            Console.WriteLine(men);
            PopUpException = true;
            await Task.Delay(150);
            Exception?.Mostrar();
        }
    }
}
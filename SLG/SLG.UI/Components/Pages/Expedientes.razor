@page "/expedientes"
@rendermode InteractiveServer
@inject NavigationManager navegador

@inject CasoDeUsoExpedienteConsultarTodos ListarExpedientesUseCase
@inject CasoDeUsoExpedienteAlta ExpedienteAltaUseCase

<PageTitle>Lista</PageTitle>

<h1>Expedientes</h1>
    <h3>
        <button class="btn btn-secondary" @onclick= "irPanel" > ir al Panel</button>
        <button class="btn btn-secondary" @onclick= "AgregarExpediente" > Agregar Expediente</button>
    </h3>
    @if (mostrar) {
        <label>Caratula: </label><input placeholder="Carátula" @bind="caratulaExp" class="form-control">
        <button class="btn btn-primary" @onclick="Aceptar">Aceptar</button>
        @if (PopUpException){
            <PopUpException @ref=Exception Mensaje="@men" />
        }
    }

    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>CARÁTULA</th>
                <th>FECHA DE CREACIÓN</th>
                <th>ULT MODIFICACIÓN</th>
                <th>ID MODIFICACIÓN</th>
                <th>ESTADO</th>
                <th>ACCIÓN</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var exp in ListarExpedientesUseCase.Ejecutar())
            {
                <tr>
                    <td>@exp.id</td>
                    <td>@exp.caratula</td>
                    <td>@exp.fechaCreacion</td>
                    <td>@exp.ultModificacion</td>
                    <td>@exp.ultModificacionID</td>
                    <td>@exp.estado</td>
                    <td>
                        <button class="btn btn-primary" @onclick= "() => Editar(exp)">Editar</button>
                        <button class="btn btn-danger" @onclick= "confirmarEliminar">Eliminar</button>
                        <PopUpConfirmacion @ref=Confirmacion Mensaje="Está seguro que desea eliminar el Expediente?" OnConfirmado="() => Eliminar(exp)"/>
                        @if (PopUpException)
                        {
                            <PopUpException @ref="Exception" Mensaje="@men" />
                        }
                    </td>               
                </tr>
            }
        </tbody>     
    </table>
    @if (edit){
            <p>Completar todos los campos para el correcto funcionamiento.</p>
            <label>Caratula: </label><input placeholder="Caratula" @bind="e.caratula" class="form-control-4"><br>
            <label>Estado: </label><select @bind="estadoAux" class="form-control-4"> 
                @foreach (var estado in estadosExp)
                {
                    <option value="@estado">@estado</option>
                }
            </select>
            <button class="btn btn-primary" @onclick="() => Aceptar1()">Aceptar</button>                            
        }
        @if (PopUpException){
            <PopUpException @ref=Exception Mensaje="@men" />
        }

    @inject CasoDeUsoExpedienteModificar ModificarExpedienteUseCase
    @inject CasoDeUsoExpedienteBaja EliminarExpedienteUseCase
    @inject IServicioSesion user
    @code {
        List<String> estadosExp = new List<String>
        {
            "Recién_iniciado",
            "Para_resolver",
            "Con_resolución",
            "En_notificacíon",
            "Finalizado",
        };
        string estadoAux = "";
        Expediente e = new Expediente();
        public bool PopUpException {get; set;} = false;
        public string men {get; set;} ="";
        PopUpConfirmacion Confirmacion=null!;
        PopUpException Exception=null!;
        String caratulaExp {get; set;} ="";
        public Usuario? uLoggeado {get; set;}
        bool mostrar = false;
        Expediente auxExp = new Expediente();
        bool edit = false;

        protected override void OnInitialized()
        {
            Console.WriteLine("/expedientes: user= "+ user.usuarioLoggeado?.id);
            uLoggeado = user.usuarioLoggeado;
            if (uLoggeado!=null){
                Console.WriteLine("/expedientes uloggeado= "+uLoggeado.id);
            }
        }
            public void irPanel(){
            navegador.NavigateTo("/panel");
        }
        void confirmarEliminar()
        {
            Confirmacion.Mostrar();
        }
        async Task Aceptar1(){
            try{
                edit = false;
                auxExp.caratula = e.caratula;
                auxExp.estado = (EstadoExpediente)Enum.Parse(typeof(EstadoExpediente), estadoAux);
                if (user.usuarioLoggeado != null)
                    ModificarExpedienteUseCase.Ejecutar(user.usuarioLoggeado.id, auxExp);
                men = "Se modificó correctamente";
                PopUpException = true;
                await Task.Delay(150);
                Exception?.Mostrar();
            }
            catch (Exception e)
            {
                men = e.Message;
                Console.WriteLine(men);
                PopUpException = true;
                await Task.Delay(150);
                Exception?.Mostrar();
            }
        }
        private void AgregarExpediente(){  
            mostrar = true;
        }
        async Task Aceptar(){
            try{
                if (user.usuarioLoggeado!=null){
                ExpedienteAltaUseCase.Ejecutar(user.usuarioLoggeado.id, new Expediente(caratulaExp));
                mostrar=false;
                }
            } catch (Exception e){
                men = e.Message;
                Console.WriteLine(men);
                Exception=new PopUpException();
                PopUpException=true;
                await Task.Delay(300);
                Exception.Mostrar();
            }
        }
        void Editar(Expediente exp){
            auxExp = exp;
            edit = true;
        }

        async Task Eliminar(Expediente exp){
            try {
                if (user.usuarioLoggeado != null)
                    EliminarExpedienteUseCase.Ejecutar(user.usuarioLoggeado.id ,exp);
                men = "Se eliminó correctamente el expediente.";
                PopUpException = true;
                await Task.Delay(150);
                Exception?.Mostrar();
            }
            catch (Exception e)
            {
                men = e.Message;
                Console.WriteLine(men);
                PopUpException = true;
                await Task.Delay(150);
                Exception?.Mostrar();
            }
        }
    }
